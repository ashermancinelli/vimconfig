#!/usr/bin/env python

import yaml
import sys
import argparse
import os
from typing import Dict
import logging
import pprint
pp = pprint.PrettyPrinter(indent=4)

# Default locations for config files
default_config_locations = [
        '~/.config/pysrun/config.yaml',
        '~/.pysrun.yaml',
        '/etc/pysrun.yaml',
        '/usr/etc/pysrun.yaml',
        ]

# Default aliases for configurations
aliases = dict()

def dict_to_cmd(config: Dict[str, str]) -> str:
    '''Convert dictionary into srun command'''

    cmd = 'srun '
    for key, value in config.items():
        cmd += f'{key} {value} '
    return cmd

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Submit Slurm job from base configuration')
    parser.add_argument('--config', '-c', type=str,
            help='Path to configuration file. Defaults to {default_config_locations[0]}',
            default=os.path.expanduser(default_config_locations[0]))
    parser.add_argument('--name', '-n', type=str, help='Configuration to execute', default='default')
    parser.add_argument('--dump', '-d', help='Dump all possible configurations avialable', action='store_true')
    parser.add_argument('--debug', '-L', help='Print debugging information', action='store_true')
    args, unknown = parser.parse_known_args()

    if args.debug:
        logging.basicConfig(level=logging.DEBUG)

    logging.debug(f'Got known args: {args}')
    logging.debug(f'Got unknown args: {unknown}')

    # If the config file doesn't exist, check the default locations until we find one that does
    config_file = os.path.abspath(args.config)
    default_loc_i = 0
    while not os.path.exists(config_file):
        logging.debug(f"Couldn't find file {config_file}")
        config_file = os.path.expanduser(default_config_locations[default_loc_i])
        logging.debug(f'Checking {config_file}')
        default_loc_i += 1

    logging.debug(f'Using config file {config_file}')
    # If we still don't have a valid config file after checking default locations,
    # let's just give up.
    if not os.path.exists(config_file):
        raise ValueError(f'Configuration file {config_file.strip()} does not exist!'
                ' Please pass `--config` flag or create either ~/.pysrun.yaml or ~/.shell/pysrun.yaml.')

    configs = {
            'default': {
                '-p': 'slurm',
                '-N': '1',
                '-n': 1,
                '-t': '30:00',
                },
            }

    # Add the configs from the config file to our internal dict of configs
    with open(config_file, 'r') as f:
        new_values = yaml.load(f)
        logging.debug(f'Got the following values from config file:\n{pp.pformat(new_values)}')

        if 'configs' in new_values.keys():
            logging.debug('Updating configurations from config file')
            configs.update(new_values['configs'])

        if 'aliases' in new_values.keys():
            logging.debug('Updating aliases from config file')
            aliases.update(new_values['aliases'])

    # If the user has passed additional flags, pass those through to the config
    # currently being used.
    passthrough_args = dict()
    while unknown:
        v = unknown.pop()
        k = unknown.pop()
        passthrough_args[k] = v
    logging.debug(f'Got the following passthrough args from cli:\n{pp.pformat(passthrough_args)}')

    logging.debug('Checking for conflicts between aliases and configs')
    if len(set(configs.keys()).intersection(aliases.keys())) > 0:
        raise ValueError('Got conflict between configuration names and aliases!')

    config_name = args.name
    logging.debug(f'Checking for alias for name "{args.name}"')
    if config_name in aliases.keys():
        logging.debug(f'Setting config name to alias "{args.name}" = "{aliases[args.name]}"')
        config_name = aliases[config_name]

    configs[config_name].update(passthrough_args)

    # Pretty print the configs if the --dump flag is passed
    if args.dump:
        logging.debug('Dumping configurations')
        pp.pprint(configs)
        sys.exit(0)

    # Otherwise, print out the command
    logging.debug('Printing srun command')
    print(dict_to_cmd(configs[config_name]))
