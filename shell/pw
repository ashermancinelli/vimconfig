#!/usr/local/bin/perl5.33.9

use strict;
use warnings;
use v5.30;
use experimental qw(smartmatch switch);

use String::Random;
use Crypt::Simple;
use Getopt::Std;
use File::Slurp;
use Data::Dumper::Concise;
use JSON;
use YAML::XS;
local $YAML::XS::Boolean = "JSON::PP";

my %opts;

getopts("g:dhnr:f:p:eiE:", \%opts);

if ($opts{h}) {
  my $help = "
Usage:

----------------------------------------------------------------

  pw [options]

  -h            help
  -i            interactive
  -e            edit
  -E            encrypt a file
  -d            dump
  -n            create new password
  -g <key>      get a key
  -f <path>     path to data
  -r <regex>    create new password from regex

----------------------------------------------------------------
";
  say $help;
  exit 1;
}

if (defined $opts{r}) {
  say String::Random->new->randregex($opts{r});
  exit;
}
if (defined $opts{n}) {
  say String::Random->new->randregex("[a-zA-Z0-9\(\)]{25}");
  exit;
}

if (defined $opts{E}) {
  my $raw = read_file($opts{E});
  my $file = $opts{E};
  my $fn = "$file.enc";
  write_file($fn, encrypt($raw));
  exit;
}

if (not (defined $opts{f} and -f $opts{f}))
{
  $opts{f} = "/Users/manc568/Google Drive/Finance/pw.enc";
}

my $raw = read_file($opts{f});
my @lines = decrypt($raw);

# To use YAML
my $decoded = Load(join '', @lines);

# To use JSON
# my $decoded = decode_json(join '', @lines);

# Get
if (defined $opts{g}) {
  my $dict = $decoded;
  my @args = split /\./, $opts{g};
  for my $arg (@args) {
    $dict = $dict->{$arg};
  }
  if (defined $dict) {
    print Dumper $dict;
  }
  else {
    say "Key does not exist!";
  }
  exit;
}

# Dump
if (defined $opts{d}) {
  print Dumper $decoded;
  exit;
}

# Edit secrets
if (defined $opts{e}) {

  # Create a temporary file for the user to edit
  my $temp_fn = String::Random->new->randregex("[a-zA-Z]{20}");
  my $f = "/tmp/$temp_fn.json";
  write_file($f, @lines);

  # Open an editor (defaults to vim :))
  my $editor = $ENV{EDITOR};
  $editor = 'vim' if not defined $editor;
  system("$editor $f");

  # Read the new contents
  my $newcontent = join '', read_file($f);

  # Move the original to a backup, write the new contents to the location of the
  # original. If the backup already exists, just remove it.
  my $orig = $opts{f};
  `rm '$orig.backup'` if -f "$orig.backup";
  `mv '$orig' '$orig.backup'`;
  write_file($opts{f}, encrypt($newcontent));

  # Remove the temporary file
  `rm $f`;
  exit;
}

# Interactive
if (defined $opts{i}) {

  # Help message just for the interactive session
  sub help {
    say "
  h: This help messasge
  q: Quit
  k: Keys
  d: Dump
";
  };

  while (1) {
    print "-> ";
    my $q = <>;
    chomp($q);
    given ($q) {
      when('h') { help; }
      when('q') { exit; }
      when('') { next; }
      when('k') { map { say; } keys %$decoded; }
      when('d') { print Dumper $decoded; }
      default {
        if (defined $decoded->{$q}) {
          print Dumper $decoded->{$q};
          next;
        }
        help;
      }
    }
  }
  exit;
}

say "Insufficient options!";
